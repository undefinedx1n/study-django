# Generated by Django 3.2.25 on 2025-05-18 16:30

from django.db import migrations, models
import uuid # 导入 uuid 模块

def populate_existing_student_ids(apps, schema_editor):
    """
    为所有 student_id 为空或 None 的 UserProfile 记录生成唯一的 student_id。
    """
    UserProfile = apps.get_model('profile_app', 'UserProfile')
    # 为了防止在非常大的表上一次性加载所有对象，可以考虑分批处理，
    # 但对于一般情况，UserProfile数量可能不多，直接 .all() 是可以的。
    # 如果 UserProfile 数量巨大，需要考虑使用 .iterator() 或分批查询。
    for profile in UserProfile.objects.all():
        if not profile.student_id:  # 检查 None 或空字符串
            profile.student_id = uuid.uuid4().hex[:12]
            # 只更新 student_id 字段，这样更安全，也可能更快
            profile.save(update_fields=['student_id'])

def reverse_populate_student_ids(apps, schema_editor):
    """
    如果需要，定义一个反向操作。
    在这里，我们简单地不做任何事情，因为自动生成的ID是唯一的，
    将其改回None可能会丢失信息，除非有特定逻辑要求恢复。
    对于此场景，migrations.RunPython.noop 通常是可接受的。
    """
    pass # 或者使用 migrations.RunPython.noop 作为第二个参数

class Migration(migrations.Migration):

    dependencies = [
        ('profile_app', '0003_userprofile_student_id'),
    ]

    operations = [
        migrations.RunPython(populate_existing_student_ids, reverse_code=reverse_populate_student_ids),
        
        migrations.AlterField(
            model_name='userprofile',
            name='student_id',
            field=models.CharField(help_text='学生的学号，必须唯一且不能为空', max_length=50, unique=True, verbose_name='学号'),
        ),
    ]
